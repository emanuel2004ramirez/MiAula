<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sistema de Planificación de Clases</title>
    <style>
        :root {
            --primary-color: #4a90e2;
            --secondary-color: #50bda1;
            --danger-color: #e74c3c;
            --background-color: #f0f4f8;
            --card-background: #ffffff;
            --text-color-dark: #2c3e50;
            --text-color-light: #6c7a89;
            --border-color: #e2e8f0;
            --box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
            --border-radius: 12px;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background-color: var(--background-color);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            color: var(--text-color-dark);
        }

        header, footer {
            background-color: var(--primary-color);
            color: white;
            padding: 15px;
            text-align: center;
        }

            header h1 {
                font-size: 1.5rem;
                font-weight: 600;
            }

        footer {
            margin-top: auto;
            font-size: 0.9rem;
        }

        .container {
            max-width: 1200px;
            margin: 20px auto;
            background: var(--card-background);
            border-radius: var(--border-radius);
            padding: 30px;
            box-shadow: var(--box-shadow);
        }

        h1 {
            text-align: center;
            color: var(--primary-color);
            margin-bottom: 30px;
            font-size: 2.2rem;
            font-weight: 700;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
        }

        h2 {
            font-size: 1.5rem;
            color: var(--primary-color);
            margin-bottom: 20px;
            border-bottom: 2px solid var(--border-color);
            padding-bottom: 10px;
            font-weight: 600;
        }

        .form-section {
            background: #fafbfc;
            border-radius: var(--border-radius);
            padding: 25px;
            margin-bottom: 25px;
            border: 1px solid var(--border-color);
        }

        .form-row {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }

        .form-group {
            display: flex;
            flex-direction: column;
        }

        label {
            font-weight: 600;
            color: var(--text-color-dark);
            margin-bottom: 8px;
            font-size: 0.95rem;
        }

        input, select, textarea {
            padding: 12px;
            border: 1px solid var(--border-color);
            border-radius: 8px;
            font-size: 1rem;
            transition: all 0.3s ease;
            background: #ffffff;
            color: var(--text-color-dark);
        }

            input:focus, select:focus, textarea:focus {
                outline: none;
                border-color: var(--primary-color);
                box-shadow: 0 0 0 3px rgba(74, 144, 226, 0.2);
            }

            input[readonly] {
                background-color: #f5f5f5;
                cursor: not-allowed;
            }

        .indicador-porcentaje {
            padding: 10px 15px;
            border-radius: 8px;
            margin-top: 10px;
            font-weight: 600;
            text-align: center;
            transition: all 0.3s ease;
        }

        .btn {
            padding: 12px 25px;
            border: none;
            border-radius: 8px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .btn-primary {
            background-color: var(--primary-color);
            color: white;
        }

        .btn-secondary {
            background-color: var(--secondary-color);
            color: white;
        }

        .btn-danger {
            background-color: var(--danger-color);
            color: white;
            padding: 8px 12px;
            font-size: 0.9rem;
        }

        .temas-container {
            margin-top: 20px;
        }

        .tema-item {
            background: var(--card-background);
            border-radius: var(--border-radius);
            padding: 20px;
            margin-bottom: 20px;
            border: 1px solid var(--border-color);
            position: relative;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
        }

        .tema-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            border-bottom: 1px solid var(--border-color);
            padding-bottom: 10px;
        }

        .tema-title {
            font-weight: 600;
            color: var(--text-color-dark);
            font-size: 1.1rem;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .nueva-tarea {
            background: #f8fcfd;
            padding: 15px;
            border-radius: 10px;
            border: 1px dashed var(--secondary-color);
            margin-top: 15px;
        }

        .tareas-list {
            margin-top: 15px;
        }

        .tarea-item {
            background: #ffffff;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 10px;
            border: 1px solid var(--border-color);
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 1px 4px rgba(0, 0, 0, 0.03);
        }

        .tarea-info {
            flex-grow: 1;
        }

        .tarea-descripcion {
            font-weight: 500;
            color: var(--text-color-dark);
            margin-bottom: 5px;
        }

        .tarea-detalles {
            font-size: 0.85rem;
            color: var(--text-color-light);
        }

        .actions {
            display: flex;
            gap: 10px;
            justify-content: center;
            margin-top: 30px;
        }

        .summary {
            background: #fffbe6;
            padding: 20px;
            border-radius: var(--border-radius);
            margin-top: 20px;
            border: 1px solid #ffeeba;
            color: #856404;
        }

            .summary h3 {
                color: #856404;
                margin-bottom: 10px;
            }

        .total-puntos-error {
            background-color: #f8d7da;
            color: #721c24;
            border-color: #f5c6cb;
        }
    </style>
</head>
<body>
    <header>
        <h1>MiAula</h1>
    </header>

    <div class="container">
        <h1>Sistema de Planificación de Clases</h1>
        <form action="Create" method="post" id="planificacionForm">
            <div id="hiddenInputsContainer" style="display: none;"></div>
            <div class="form-section">
                <h2>Información General de la Planificación</h2>
                <div class="form-row">
                    <div class="form-group">
                        <label for="claseId">ID de Clase:</label>
                        <input type="text" readonly name="Id" value="@Model.Id">
                    </div>
                    <div class="form-group">
                        <label for="fechaInicio">Fecha de Inicio:</label>
                        <input type="date" id="fechaInicio" name="fechaInicio" required>
                    </div>
                    <div class="form-group">
                        <label for="fechaFin">Fecha de Fin:</label>
                        <input type="date" id="fechaFin" name="fechaFin" required>
                    </div>
                </div>
            </div>

            <div class="form-section">
                <h2>Exámenes Obligatorios</h2>
                <div id="examenesContainer">
                </div>
                <button type="button" class="btn btn-secondary" onclick="agregarExamen()" id="agregarExamenBtn">+ Agregar Examen</button>
            </div>

            <div class="form-section">
                <h2>Temas y Tareas</h2>
                <div class="form-row">
                    <div class="form-group">
                        <label for="nuevoTem">Nombre del Tema:</label>
                        <input type="text" id="nuevoTemaNombre" placeholder="Ej: Introducción a las Matemáticas">
                    </div>
                    <div class="form-group">
                        <label for="nuevoTemaObjetivos">Objetivos del Tema:</label>
                        <textarea id="nuevoTemaObjetivos" rows="2" placeholder="Objetivos de aprendizaje..."></textarea>
                    </div>
                </div>
                <button type="button" class="btn btn-secondary" onclick="agregarTema()">+ Agregar Tema</button>
                <div class="temas-container" id="temasContainer">
                </div>
            </div>
            <div class="summary">
                <h3>📊 Resumen de la Planificación</h3>
                <p id="resumenInfo">Puntos de Tareas: 0% | Puntos de Exámenes: 0% | Puntos totales: 0</p>
                <div class="indicador-puntos" id="indicadorPuntos">⚠️ Faltan 100 puntos para completar 100</div>
            </div>
            <div class="actions">
                <button type="submit" class="btn btn-primary" id="guardarBtn" disabled>💾 Guardar Planificación</button>
            </div>
        </form>
    </div>
    <footer>
        <p>© 2025 - MiAula. Todos los derechos reservados.</p>
    </footer>
    <script>
        let temasData = [];
        let examenesData = [];
        let nextTemaId = 0;
        let nextTareaId = 0;
        let nextExamenId = 0;

        function agregarTema() {
            const nombre = document.getElementById('nuevoTemaNombre').value;
            const objetivos = document.getElementById('nuevoTemaObjetivos').value;

            if (!nombre.trim()) {
                alert('Por favor, ingresa el nombre del tema');
                return;
            }

            const tema = {
                id: nextTemaId++,
                nombre: nombre,
                objetivos: objetivos,
                tareas: []
            };
            temasData.push(tema);
            renderForm();

            document.getElementById('nuevoTemaNombre').value = '';
            document.getElementById('nuevoTemaObjetivos').value = '';
        }

        function agregarTarea(temaId) {
            const tema = temasData.find(t => t.id === temaId);
            if (!tema) return;

            const descripcion = document.getElementById(`desc_${temaId}`).value;
            const tipo = document.getElementById(`tipo_${temaId}`).value;
            const fechaLimite = document.getElementById(`fecha_${temaId}`).value;
            const valorPuntos = parseFloat(document.getElementById(`valor_${temaId}`).value) || 0;

            if (!descripcion.trim()) {
                alert('Por favor, ingresa la descripción de la tarea');
                return;
            }

            const tarea = {
                id: nextTareaId++,
                descripcion: descripcion,
                tipo: tipo,
                fechaLimite: fechaLimite || 'Sin fecha',
                valorPuntos: valorPuntos
            };
            tema.tareas.push(tarea);
            renderForm();

            document.getElementById(`desc_${temaId}`).value = '';
            document.getElementById(`tipo_${temaId}`).value = 'Tarea';
            document.getElementById(`fecha_${temaId}`).value = '';
            document.getElementById(`valor_${temaId}`).value = '';
        }

        function agregarExamen() {
            if (examenesData.length > 0) return;

            const examen = {
                id: nextExamenId++,
                nombre: '',
                fecha: '',
                valorPuntos: 0
            };
            examenesData.push(examen);
            renderForm();
        }

        function eliminarTema(temaId) {
            if (confirm('¿Estás seguro de eliminar este tema y todas sus tareas?')) {
                temasData = temasData.filter(t => t.id !== temaId);
                renderForm();
            }
        }

        function eliminarExamen(examenId) {
            if (confirm('¿Estás seguro de eliminar este examen?')) {
                examenesData = examenesData.filter(e => e.id !== examenId);
                renderForm();
            }
        }

        function eliminarTarea(temaId, tareaId) {
            const tema = temasData.find(t => t.id === temaId);
            if (tema) {
                tema.tareas = tema.tareas.filter(t => t.id !== tareaId);
                renderForm();
            }
        }

        function actualizarExamen(examenId, campo, valor) {
            const examen = examenesData.find(e => e.id === examenId);
            if (examen) {
                examen[campo] = valor;
            }
            renderForm();
        }

        function renderForm() {

            const temasContainer = document.getElementById('temasContainer');
            const hiddenInputsContainer = document.getElementById('hiddenInputsContainer');
            const examenesContainer = document.getElementById('examenesContainer');
            const agregarExamenBtn = document.getElementById('agregarExamenBtn');

            temasContainer.innerHTML = '';
            hiddenInputsContainer.innerHTML = '';
            examenesContainer.innerHTML = '';

            let totalPuntosTareas = 0;
            let totalPuntosExamenes = 0;
            let totalTareas = 0;

          
            examenesData.forEach((examen, index) => {
                totalPuntosExamenes += examen.valorPuntos;
                const examenDiv = document.createElement('div');
                examenDiv.className = 'form-row';
                examenDiv.innerHTML = `
                    <div class="form-group">
                        <label for="examenNombre_${examen.id}">Nombre del Examen:</label>
                        <input type="text" name="examenes[${index}].Nombre" id="examenNombre_${examen.id}" placeholder="Ej: Examen Final" value="${examen.nombre}" oninput="actualizarExamen(${examen.id}, 'nombre', this.value)">
                    </div>
                    <div class="form-group">
                        <label for="examenFecha_${examen.id}">Fecha del Examen:</label>
                        <input type="date" name="examenes[${index}].Fecha" id="examenFecha_${examen.id}" value="${examen.fecha}" onchange="actualizarExamen(${examen.id}, 'fecha', this.value)">
                    </div>
                    <div class="form-group">
                        <label for="examenPuntos_${examen.id}">Valor (Puntos):</label>
                        <input type="number" name="examenes[${index}].Valor" id="examenPuntos_${examen.id}" min="0" placeholder="Ej: 50" value="${examen.valorPuntos}" oninput="actualizarExamen(${examen.id}, 'valorPuntos', parseFloat(this.value) || 0)">
                    </div>
                    <button type="button" class="btn btn-danger" onclick="eliminarExamen(${examen.id})">🗑️</button>
                `;
                examenesContainer.appendChild(examenDiv);
            });

            // Habilitar/deshabilitar botón de agregar examen
            if (examenesData.length > 0) {
                agregarExamenBtn.disabled = true;
                agregarExamenBtn.textContent = 'Un Examen ya ha sido agregado';
            } else {
                agregarExamenBtn.disabled = false;
                agregarExamenBtn.textContent = '+ Agregar Examen';
            }

            
            temasData.forEach((tema, temaIndex) => {
                let puntosTema = tema.tareas.reduce((sum, tarea) => sum + tarea.valorPuntos, 0);
                totalPuntosTareas += puntosTema;

                const temaDiv = document.createElement('div');
                temaDiv.className = 'tema-item';
                temaDiv.innerHTML = `
                    <div class="tema-header">
                        <div class="tema-title">📖 ${tema.nombre}</div>
                        <div>
                            <strong>Puntos del Tema:</strong> ${puntosTema}
                            <button type="button" class="btn btn-danger" onclick="eliminarTema(${tema.id})">🗑️ Eliminar</button>
                        </div>
                    </div>
                    <div><strong>Objetivos:</strong> ${tema.objetivos || 'No especificados'}</div>
                    <div class="nueva-tarea">
                        <div class="form-row">
                            <div class="form-group">
                                <label>Descripción de la Tarea:</label>
                                <input type="text" id="desc_${tema.id}" placeholder="Ej: Resolver ejercicios 1-10">
                            </div>
                            <div class="form-group">
                                <label>Tipo:</label>
                                <select id="tipo_${tema.id}">
                                    <option value="Tarea">Tarea</option>
                                    <option value="Proyecto">Proyecto</option>
                                    <option value="Investigación">Investigación</option>
                                </select>
                            </div>
                        </div>
                        <div class="form-row">
                            <div class="form-group">
                                <label>Fecha Límite:</label>
                                <input type="date" id="fecha_${tema.id}">
                            </div>
                            <div class="form-group">
                                <label>Valor (Puntos):</label>
                                <input type="number" id="valor_${tema.id}" min="0" placeholder="Ej: 10">
                            </div>
                        </div>
                        <button type="button" class="btn btn-secondary" onclick="agregarTarea(${tema.id})">+ Agregar Tarea al Tema</button>
                    </div>
                    <div class="tareas-list">
                        ${renderTareasHtml(tema.tareas, tema.id)}
                    </div>
                `;
                temasContainer.appendChild(temaDiv);
                totalTareas += tema.tareas.length;

                renderHiddenInputs(tema, temaIndex, hiddenInputsContainer);
            });

            actualizarResumen(totalPuntosTareas, totalPuntosExamenes);
        }

        function renderTareasHtml(tareas, temaId) {
            let tareasHtml = '';
            tareas.forEach((tarea, tareaIndex) => {
                tareasHtml += `
                    <div class="tarea-item">
                        <div class="tarea-info">
                            <div class="tarea-descripcion">📝 ${tarea.descripcion}</div>
                            <div class="tarea-detalles">
                                <span>Tipo: ${tarea.tipo}</span> •
                                <span>Fecha límite: ${tarea.fechaLimite}</span> •
                                <span>Valor: ${tarea.valorPuntos} puntos</span>
                            </div>
                        </div>
                        <button type="button" class="btn btn-danger" onclick="eliminarTarea(${temaId}, ${tarea.id})">🗑️</button>
                    </div>
                    <input type="hidden" name="temas[${temaId}].tareas[${tareaIndex}].Descripcion" value="${tarea.descripcion}" />
                    <input type="hidden" name="temas[${temaId}].tareas[${tareaIndex}].Tipo" value="${tarea.tipo}" />
                    <input type="hidden" name="temas[${temaId}].tareas[${tareaIndex}].Fecha_Entrega" value="${tarea.fechaLimite}" />
                    <input type="hidden" name="temas[${temaId}].tareas[${tareaIndex}].Valor" value="${tarea.valorPuntos}" />
                `;
            });
            return tareasHtml;
        }

        function renderHiddenInputs(tema, temaIndex, hiddenContainer) {
            hiddenContainer.innerHTML += `
                <input type="hidden" name="temas[${temaIndex}].Nombre" value="${tema.nombre}" />
                <input type="hidden" name="temas[${temaIndex}].Objetivos" value="${tema.objetivos}" />
            `;
        }

        function actualizarResumen(totalPuntosTareas, totalPuntosExamenes) {
            const total = totalPuntosTareas + totalPuntosExamenes;
            const porcentajeTareas = total > 0 ? ((totalPuntosTareas / total) * 100).toFixed(2) : 0;
            const porcentajeExamenes = total > 0 ? ((totalPuntosExamenes / total) * 100).toFixed(2) : 0;
            const indicadorPuntos = document.getElementById('indicadorPuntos');
            const guardarBtn = document.getElementById('guardarBtn');
            const resumenInfo = document.getElementById('resumenInfo');

            resumenInfo.textContent = `Puntos de Tareas: ${porcentajeTareas}% | Puntos de Exámenes: ${porcentajeExamenes}% | Puntos totales: ${total}`;

            if (total === 100) {
                indicadorPuntos.textContent = '✅ El total de puntos es 100';
                indicadorPuntos.className = 'indicador-porcentaje';
                guardarBtn.disabled = false;
            } else if (total > 100) {
                indicadorPuntos.textContent = `❌ ¡El total de puntos excede 100! (Suma actual: ${total})`;
                indicadorPuntos.className = 'indicador-porcentaje total-puntos-error';
                guardarBtn.disabled = true;
            } else {
                indicadorPuntos.textContent = `⚠️ Faltan ${100 - total} puntos para completar 100`;
                indicadorPuntos.className = 'indicador-porcentaje';
                guardarBtn.disabled = true;
            }
        }

        document.addEventListener('DOMContentLoaded', () => {
            renderForm();
        });
    </script>
</body>
</html>